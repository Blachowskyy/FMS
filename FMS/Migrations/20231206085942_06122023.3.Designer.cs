// <auto-generated />
using System;
using FMS.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231206085942_06122023.3")]
    partial class _061220233
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FMS.Models.Common.TebConfigData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccelerationLimitX")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowInitializeWithBackwardMotion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackwardMaxVelocity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DtHysteresis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DtRef")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DynamicObstacleInflationRadius")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ForkliftId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForwardMaxVelocity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GoalToleranceXY")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GoalToleranceYaw")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IncludeCostmapObstacles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeDynamicObstacles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MinimalObstacleDistance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OscillationRecovery")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SaveSettings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StaticObstacleInflationRadius")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TurningAccelerationLimit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TurningMaxVelocity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TurningRadius")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WheelBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ForkliftId")
                        .IsUnique();

                    b.ToTable("tebConfigDatas");
                });

            modelBuilder.Entity("FMS.Models.Main.Forklift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LidarLocAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrstationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VisionaryAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Forklifts");
                });

            modelBuilder.Entity("FMS.Models.Main.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsQueued")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("FMS.Models.Main.JobStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobStepLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobStepLocationId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobSteps");
                });

            modelBuilder.Entity("FMS.Models.Main.JobStepType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JobStepTypes");
                });

            modelBuilder.Entity("FMS.Models.Main.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionX")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionY")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FMS.Models.Main.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Admin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Client")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Installator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLogged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FMS.Models.Common.TebConfigData", b =>
                {
                    b.HasOne("FMS.Models.Main.Forklift", "Forklift")
                        .WithOne("BackedUpTebConfig")
                        .HasForeignKey("FMS.Models.Common.TebConfigData", "ForkliftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forklift");
                });

            modelBuilder.Entity("FMS.Models.Main.JobStep", b =>
                {
                    b.HasOne("FMS.Models.Main.Job", null)
                        .WithMany("JobStepList")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Models.Main.Location", "JobStepLocation")
                        .WithMany()
                        .HasForeignKey("JobStepLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Models.Main.JobStepType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobStepLocation");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("FMS.Models.Main.Forklift", b =>
                {
                    b.Navigation("BackedUpTebConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Models.Main.Job", b =>
                {
                    b.Navigation("JobStepList");
                });
#pragma warning restore 612, 618
        }
    }
}
